AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for creating AWS resources."

Parameters:
  GithubRepo:
    Type: String

  GitHubBrunch:
    Type: String
  
  GithubToken:
    Type: String
    
  GitHubUser:
    Type: String

Resources:

    B1FrontendBucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: b1-frontend-bucket

    BurningPhotosBucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: burning-photos 
            #Function: !GetAtt arn:aws:lambda:us-east-1:466369883393:function:index-photos

    SearchPhotosFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            FunctionName: search
            Runtime: python3.11
            Handler: search.lambda_handler
            Role: arn:aws:iam::466369883393:role/lambda-general 
            Code:
                ZipFile: |
                    # Your Python code here
                    import boto3
                    import uuid
                    import json
                    import requests
                    from requests_aws4auth import AWS4Auth


                    def response(status_code, body):
                        return {
                            "statusCode": status_code,
                            "headers": {
                                "Access-Control-Allow-Headers": "*",
                                "Access-Control-Allow-Origin": "*",
                                "Access-Control-Allow-Methods": "*",
                            },
                            "body": json.dumps(body),
                        }


                    def lambda_handler(event, context):
                        query_params = event.get("queryStringParameters")
                        if not query_params:
                            return response(403, {"code": 403, "message": "Missing query parameters"})
                        query = query_params.get("q")
                        if not query:
                            return response(403, {"code": 403, "message": "Missing query string"})
                        try:
                            lex = boto3.client("lexv2-runtime", region_name="us-east-1")
                            user_id = str(uuid.uuid4())
                            lex_response = lex.recognize_text(
                                botId="4G2QTRTNLS",
                                botAliasId="TSTALIASID",
                                localeId="en_US",
                                sessionId=user_id,
                                text=query,
                            )
                        except Exception as e:
                            return response(500, {"code": 500, "message": f"Failed to call Lex: {str(e)}"})
                        try:
                            keyword_values = (
                                lex_response.get("sessionState", {})
                                .get("intent", {})
                                .get("slots", {})
                                .get("Keyword", {})
                                .get("values", [])
                            )
                        except Exception as e:
                            return response(
                                500,
                                {
                                    "code": 500,
                                    "message": f"Failed to extract keyword values from Lex response: {str(e)}",
                                },
                            )
                        keywords = []
                        for value in keyword_values:
                            interpreted_value = value.get("value", {}).get("interpretedValue")
                            if interpreted_value:
                                keywords.append(interpreted_value)

                        query_body = {
                            "query": {
                                "bool": {"should": [{"match": {"labels": keyword}} for keyword in keywords]}
                            }
                        }

                        try:
                            credentials = boto3.Session().get_credentials()
                            awsauth = AWS4Auth(
                                credentials.access_key,
                                credentials.secret_key,
                                "us-east-1",
                                "es",
                                session_token=credentials.token,
                            )
                            host = "search-photos1-hwrbp5mxflgqrrzwku2dllowjm.us-east-1.es.amazonaws.com"
                            url = "https://" + host + "/photos/_search/"
                            headers = {"Content-Type": "application/json"}
                            es_response = requests.get(
                                url, auth=awsauth, headers=headers, data=json.dumps(query_body)
                            ).json()
                        except Exception as e:
                            return response(
                                500, {"code": 500, "message": f"Failed to call Elasticsearch: {str(e)}"}
                            )
                        hits = es_response.get("hits", {}).get("hits", [])

                        photos = []
                        for hit in hits:
                            try:
                                photo_data = hit.get("_source", {})
                                photo_url = "https://{}.s3.amazonaws.com/{}".format(
                                    photo_data["bucket"], photo_data["objectKey"]
                                )
                                photo_labels = photo_data.get("labels", [])
                                photos.append({"url": photo_url, "labels": photo_labels})
                            except Exception as e:
                                return response(
                                    500, {"code": 500, "message": f"Failed to process hit: {str(e)}"}
                                )

                        return response(200, {"results": photos})

                Timeout: 30

    IndexPhotosFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            FunctionName: index-photos
            Runtime: python3.10
            Handler: index-photos.lambda_handler
            Role: arn:aws:iam::466369883393:role/lambda-general  
            Code:
                ZipFile: |
                    # Your Python code here
                    import boto3
                    import traceback
                    from requests_aws4auth import AWS4Auth
                    import requests


                    def lambda_handler(event, context):
                        try:
                            bucket = event["Records"][0]["s3"]["bucket"]["name"]
                            key = event["Records"][0]["s3"]["object"]["key"]
                            s3 = boto3.client("s3")
                            rekognition = boto3.client("rekognition")

                            try:
                                response = s3.get_object(Bucket=bucket, Key=key)
                                custom_labels = (
                                    response["Metadata"].get("x-amz-meta-customLabels", "").split(",")
                                )
                                rekognition_response = rekognition.detect_labels(
                                    Image={
                                        "S3Object": {
                                            "Bucket": bucket,
                                            "Name": key,
                                        },
                                    },
                                )
                            except Exception as e:
                                print(f"Failed to get object or detect labels. Exception: {str(e)}")
                                print(traceback.format_exc())
                                return

                            detected_labels = [label["Name"] for label in rekognition_response["Labels"]]
                            labels = custom_labels + detected_labels
                            image_metadata = {
                                "objectKey": key,
                                "bucket": bucket,
                                "createdTimestamp": response["LastModified"].strftime("%Y-%m-%d %H:%M:%S"),
                                "labels": labels,
                            }
                            print(f"Processing image metadata: {image_metadata}")
                            region = "us-east-1"
                            service = "es"
                            credentials = boto3.Session().get_credentials()
                            awsauth = AWS4Auth(
                                credentials.access_key,
                                credentials.secret_key,
                                region,
                                service,
                                session_token=credentials.token,
                            )
                            index = "photos"
                            host = "search-photos1-hwrbp5mxflgqrrzwku2dllowjm.us-east-1.es.amazonaws.com"
                            url = "https://" + host + "/" + index + "/_doc/"
                            headers = {"Content-Type": "application/json"}

                            try:
                                es_response = requests.post(
                                    url, auth=awsauth, json=image_metadata, headers=headers
                                )
                                if es_response.status_code in range(200, 299):
                                    print("Successfully uploaded to Elasticsearch")
                                else:
                                    print(
                                        f"Failed to upload to Elasticsearch. Status code: {es_response.status_code}, Response: {es_response.text}"
                                    )
                            except Exception as e:
                                print(f"Failed to upload to Elasticsearch. Exception: {str(e)}")
                                print(traceback.format_exc())
                        except Exception as e:
                            print(f"Unexpected error occurred. Exception: {str(e)}")
                            print(traceback.format_exc())

            Timeout: 30

# Add more resources as needed

Outputs:

    PoorMansBucketOutput:
        Description: "S3 Bucket for Poor Man's Frontend"
        Value: !Ref B1FrontendBucket

    BurningPhotosBucketOutput:
        Description: "S3 Bucket for Burning Photos"
        Value: !Ref BurningPhotosBucket

    SearchPhotosFunctionOutput:
        Description: "Lambda Function for Searching Photos"
        Value: !Ref SearchPhotosFunction

    IndexPhotosFunctionOutput:
        Description: "Lambda Function for Indexing Photos"
        Value: !Ref IndexPhotosFunction
